openapi: 3.0.3
info:
  title: Demo Service
  version: "1.0"
paths:
  /health:
    get:
      summary: Liveness probe
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ok]
  /users:
    get:
      summary: List users
      parameters:
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 50 }
        - in: query
          name: cursor
          schema: { type: string }
      responses:
        "200":
          description: A page of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
  /users/{user_id}:
    get:
      summary: Fetch a single user
      parameters:
        - in: path
          name: user_id
          required: true
          schema: { type: integer, minimum: 1 }
      responses:
        "200":
          description: User found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users:
    post:
      summary: Create user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreate"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

components:
  schemas:
    User:
      type: object
      required: [id, email]
      properties:
        id: { type: integer, minimum: 1 }
        email: { type: string, format: email }
        name: { type: string }
        created_at: { type: string, format: date-time }
    UserCreate:
      type: object
      required: [email]
      properties:
        email: { type: string, format: email }
        name: { type: string }
    Error:
      type: object
      properties:
        error: { type: string }
        message: { type: string }
